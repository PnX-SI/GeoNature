name: Docker

on:
  push:
    branches:
      - develop
  release:
    types: [published]

jobs:
  build-backend:
    name: Build backend image
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ fromJSON(steps.build-prod.outputs.metadata)['image.name'] }}
      image_digest: ${{ steps.build-prod.outputs.digest }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: True
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Generate metadata for wheels image
        id: meta-wheels
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/geonature-backend
          flavor: |
            suffix=-wheels
          tags: |
            type=ref,event=branch
            type=ref,event=tag
      -
        name: Build and export wheels image
        id: build-wheels
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend/Dockerfile
          target: wheels
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-wheels.outputs.tags }}
          labels: ${{ steps.meta-wheels.outputs.labels }}
      -
        name: Generate metadata for prod image
        id: meta-prod
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/geonature-backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
      -
        name: Build and export prod image
        id: build-prod
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend/Dockerfile
          target: prod-full
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-prod.outputs.tags }}
          labels: ${{ steps.meta-prod.outputs.labels }}

  frontend-config:
    name: Generate frontend config
    runs-on: ubuntu-latest
    needs: build-backend
    container: ${{ needs.build-backend.outputs.image_name }}@${{ needs.build-backend.outputs.image_digest }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Generate frontend configuration
        run: |
          geonature generate-frontend-config --input frontend/src/conf/app.config.ts.sample --output frontend/src/conf/app.config.ts
          geonature generate-frontend-module-config OCCTAX --output contrib/occtax/frontend/app/module.config.ts
          geonature generate-frontend-module-config OCCHAB --output contrib/gn_module_occhab/frontend/app/module.config.ts
          geonature generate-frontend-module-config VALIDATION --output contrib/gn_module_validation/frontend/app/module.config.ts
        env:
          GEONATURE_SQLALCHEMY_DATABASE_URI: "postgresql://pguser:pgpass@localhost:5432/dbname"
          GEONATURE_SECRET_KEY: "this is in fact not used in this action"
          GEONATURE_API_ENDPOINT: "http://127.0.0.1:8000"
          GEONATURE_API_TAXHUB: "http://127.0.0.1:5000/api"
          GEONATURE_URL_APPLICATION: "http://127.0.0.1:4200"
      -
        name: Archive GeoNature frontend configuration
        uses: actions/upload-artifact@v3
        with:
          name: frontend-config-geonature
          path: frontend/src/conf/app.config.ts
      -
        name: Archive OccTax frontend configuration
        uses: actions/upload-artifact@v3
        with:
          name: frontend-config-occtax
          path: contrib/occtax/frontend/app/module.config.ts
      -
        name: Archive OccHab frontend configuration
        uses: actions/upload-artifact@v3
        with:
          name: frontend-config-occhab
          path: contrib/gn_module_occhab/frontend/app/module.config.ts
      -
        name: Archive Validation frontend config
        uses: actions/upload-artifact@v3
        with:
          name: frontend-config-validation
          path: contrib/gn_module_validation/frontend/app/module.config.ts

  build-frontend:
    name: Build frontend image
    runs-on: ubuntu-latest
    needs: frontend-config
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: True
      -
        name: Download GeoNature frontend configuartion
        uses: actions/download-artifact@v3
        with:
          name: frontend-config-geonature
          path: frontend/src/conf/
      -
        name: Download OccTax frontend configuartion
        uses: actions/download-artifact@v3
        with:
          name: frontend-config-occtax
          path: contrib/occtax/frontend/app/
      -
        name: Download OccHab frontend configuartion
        uses: actions/download-artifact@v3
        with:
          name: frontend-config-occhab
          path: contrib/gn_module_occhab/frontend/app/
      -
        name: Download Validation frontend configuartion
        uses: actions/download-artifact@v3
        with:
          name: frontend-config-validation
          path: contrib/gn_module_validation/frontend/app/
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/geonature-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
      -
        name: Login to GHCR
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./frontend/Dockerfile
          target: prod-full
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
