import { Injectable } from '@angular/core';
import { FormGroup, FormControl, AbstractControl, FormBuilder } from '@angular/forms';
import { ImportDataService } from '../data.service';
import {
  Field,
  FieldMapping,
  FieldMappingItem,
  FieldMappingValues,
} from '../../models/mapping.model';
import { BehaviorSubject, Subscription, forkJoin } from 'rxjs';
import { ImportProcessService } from '../../components/import_process/import-process.service';
import { ConfigService } from '@geonature/services/config.service';
import { FormService } from '@geonature_common/form/form.service';
import { FieldMappingPresetUtils } from '../../utils/fieldmapping-preset-utils';

interface FieldsMappingStatus {
  mapped: Set<string>;
  unmapped: Set<string>;
  autogenerated: Set<string>;
}

@Injectable()
export class FieldMappingService {
  /**
   * Observable that emits data related to field mappings.
   * The emitted data has the following shape:
   * - fieldMappings: Array<FieldMapping> | null - All field mappings.
   * - targetFields: any - Data related to target fields.
   * - sourceFields: Array<string> - Names of source fields.
   */
  public data: BehaviorSubject<{
    fieldMappings: Array<FieldMapping> | null;
    targetFields: any;
    sourceFields: Array<string>;
  }> = new BehaviorSubject({
    fieldMappings: null,
    targetFields: null,
    sourceFields: null,
  });

  /**
   * Form control for selecting a field mapping.
   */
  public mappingSelectionFormControl: FormControl = new FormControl(null, []);

  /**
   * Observable that emits the currently selected field mapping.
   */
  public currentFieldMapping: BehaviorSubject<FieldMapping> = new BehaviorSubject(null);

  /**
   * Form group for managing field mappings.
   */
  public mappingFormGroup: FormGroup;
  public dynamicFormWrapperFormGroup: FormGroup;

  /**
   * Contains all field mappings.
   */
  private mappingData: Array<FieldMapping>;

  /**
   * Data related to target fields.
   */
  private targetFieldsData: any;

  /**
   * Names of source fields.
   */
  private sourceFields: Array<string>;

  private fieldsByEntity: Record<string, Array<string>> = {};

  /**
   * Status of field mappings.
   * Contains sets of names of fields mapped, unmapped and autogenerated.
   */
  private fieldMappingStatus: FieldsMappingStatus = {
    mapped: new Set<string>(),
    unmapped: new Set<string>(),
    autogenerated: new Set<string>(),
  };

  private currentFieldMappingSubscription: Subscription;

  /**
   * Flag indicating if the form is ready to be displayed.
   */
  public isReady: boolean = false;

  constructor(
    private _fb: FormBuilder,
    private _importDataService: ImportDataService,
    private _importProcessService: ImportProcessService,
    private _configService: ConfigService,
    private _formservice: FormService
  ) {}

  /**
   * Checks if a source field is [mapped|unmapped|autogenerated].
   *
   * @param {string} mappingStatus - Field mapping status to check
   * @param {string} targetField - The source field to check
   * @return {boolean} - True if the item is associated with the given status
   */
  checkTargetFieldStatus(mappingStatus: string, targetField: string) {
    return this.fieldMappingStatus[mappingStatus].has(targetField);
  }

  parseData({ fieldMappings, targetFields, sourceFields }) {
    this.targetFieldsData = targetFields;
    this.mappingData = fieldMappings;
    this.sourceFields = sourceFields;

    this.fieldMappingStatus.unmapped = new Set(this.sourceFields);
    this.flattenTargetFieldData(this.targetFieldsData).forEach((field) => {
      if (field.autogenerated) {
        this.fieldMappingStatus.autogenerated.add(field.name_field);
      } else {
        // this.fieldMappingStatus.unmapped.add(name_field);
      }
    });
  }

  retrieveData() {
    forkJoin({
      fieldMappings: this._importDataService.getFieldMappings(),
      targetFields: this._importDataService.getBibFields(),
      sourceFields: this._importDataService.getColumnsImport(
        this._importProcessService.getImportData().id_import
      ),
    }).subscribe(({ fieldMappings, targetFields, sourceFields }) => {
      this.data.next({ fieldMappings, targetFields, sourceFields });
    });
  }
  getTargetFieldsData() {
    return this.targetFieldsData;
  }
  getSourceFieldsData() {
    return this.sourceFields;
  }
  getMappings() {
    return this.mappingData;
  }

  getUnmappedFieldsLength() {
    return this.getUnmappedFields().length;
  }
  getUnmappedFields() {
    return this.sourceFields.filter((field) => !this.getMappedSourceColumn().includes(field));
  }

  initForm() {
    this.mappingFormGroup = this._fb.group({});
    this.mappingFormGroup.updateValueAndValidity();

    this.dynamicFormWrapperFormGroup = this._fb.group({});
    this.dynamicFormWrapperFormGroup.updateValueAndValidity();
  }

  /**
   * Flattens the field mapping data from the given target fields array.
   *
   * @param {any[]} targetFields - The array of target fields containing themes and fields.
   * @return {any[]} The flattened array of field mapping data.
   */
  flattenTargetFieldData(targetFields: any): Field[] {
    let flattened = [];
    targetFields.forEach(({ entity, themes }) => {
      let entityFields = [];
      themes.forEach(({ fields, theme }) => {
        fields.forEach((field) => {
          entityFields.push(field.name_field);
          flattened.push({
            ...field,
            ...{
              entity: {
                label: entity.label,
                parent: entity.parent,
                unique_column: entity.unique_column,
              },
              theme: theme.fr_label_theme,
            },
          });
        });
        this.fieldsByEntity[entity.label] = entityFields;
      });
    });
    if (this.fieldsByEntity) {
      this.fieldsByEntity = this.removeCommonStrings(this.fieldsByEntity);
    }
    return flattened;
  }

  /**
   * Removes common strings from each array in the given map and returns a new map with the modified arrays.
   *
   * @param {Record<string, string[]>} map - The map containing arrays of strings.
   * @return {Record<string, string[]>} A new map with the modified arrays.
   */
  removeCommonStrings(record: Record<string, string[]>): Record<string, string[]> {
    const result: Record<string, string[]> = {};

    for (const entity in record) {
      result[entity] = record[entity].filter((field) => {
        for (const entityCandidate in record) {
          if (entityCandidate != entity) {
            if (record[entityCandidate].includes(field)) {
              return false;
            }
          }
        }
        return true;
      });
    }
    return result;
  }

  manageValueChangeMulti(oldValue = [], newValue) {
    for (let value of newValue ? newValue : []) {
      if (!oldValue || !oldValue.includes(value)) {
        this.onFieldMappingChange(value, null);
      }
    }

    for (let value of oldValue ? oldValue : []) {
      if (!newValue || !newValue.includes(value)) {
        this.onFieldMappingChange(null, value);
      }
    }
  }

  /**
   * Populates the mapping form with target field data.
   *
   */
  populateMappingForm() {
    // Create a dynamicformWrappergroup

    // Populate the form group
    this.flattenTargetFieldData(this.targetFieldsData).forEach(({ name_field, multi }) => {
      let fieldControl: AbstractControl;
      let oldValue = null;
      if (!(name_field in this.mappingFormGroup.controls)) {
        // Control validators will be set in the following iteration
        fieldControl = new FormControl(null, []);
        fieldControl.valueChanges.subscribe((vc) => {
          if (Array.isArray(vc)) this.manageValueChangeMulti(oldValue, vc);
          else this.onFieldMappingChange(vc, oldValue);
          oldValue = vc;
          fieldControl.setValue(vc, { emitEvent: false });
        });
      } else {
        fieldControl = this.mappingFormGroup.controls[name_field];
      }

      // Reset the control in the form group
      this.mappingFormGroup.addControl(name_field, fieldControl);
    });

    // Deal with inter-field conditions
    // TODO ? Move the content of this iteration in the previous iteration
    this.flattenTargetFieldData(this.targetFieldsData).forEach(
      ({ name_field, mandatory, mandatory_conditions, optional_conditions, entity }) => {
        if (mandatory_conditions !== null && !mandatory) {
          this.mappingFormGroup
            .get(name_field)
            .setValidators(
              this._formservice.RequiredIfControlIsNotNullValidator(
                mandatory_conditions,
                this.fieldsByEntity[entity.label]
              )
            );
        }
        if (optional_conditions !== null && mandatory) {
          this.mappingFormGroup
            .get(name_field)
            .setValidators(
              this._formservice.NotRequiredIfControlIsNotNullValidator(
                optional_conditions,
                this.fieldsByEntity[entity.label]
              )
            );
        } else if (mandatory) {
          this.mappingFormGroup
            .get(name_field)
            .setValidators(
              this._formservice.NotRequiredIfNoOther(this.fieldsByEntity[entity.label])
            );
        }

        this.mappingFormGroup.get(name_field).valueChanges.subscribe((vc) => {
          Object.keys(this.mappingFormGroup.controls).forEach((k) => {
            this.mappingFormGroup.controls[k].updateValueAndValidity({ emitEvent: false });
          });
        });
      }
    );

    this.currentFieldMappingSubscription = this.currentFieldMapping.subscribe((fieldMapping) => {
      this.fieldMappingStatus.unmapped = new Set(this.sourceFields);
      this.fieldMappingStatus.mapped = new Set();

      if (fieldMapping === null) {
        this.mappingFormGroup.reset();
        for (const field of this.fieldMappingStatus.autogenerated) {
          const control = this.mappingFormGroup.get(field);
          // TODO: not do this :)
          if (
            field !== 'unique_id_sinp_generate' ||
            this._configService.IMPORT.DEFAULT_GENERATE_MISSING_UUID
          ) {
            control.setValue({ constant_value: true });
          } else {
            control.setValue({ constant_value: false });
          }
        }
      } else {
        this.fillFormWithMapping(fieldMapping.values, true);
      }
    });
  }

  destroySubscription() {
    this.currentFieldMappingSubscription.unsubscribe();
  }

  /**
   * Fill the field form with the value define in the given mapping
   * @param mapping : id of the mapping
   * This method also apply the __preset__ values from the importData above the mappingValues.
   */
  fillFormWithMapping(mappingvalues: FieldMappingValues, fromMapping = false) {
    // Retrieve fields for this mapping
    mappingvalues = FieldMappingPresetUtils.patchMappingValuesWithPreset(
      mappingvalues,
      this._importProcessService.getImportData()?.fieldmapping
    );
    this.mappingFormGroup.reset();

    Object.entries(mappingvalues as FieldMappingValues).forEach(async ([target, source]) => {
      const control = this.mappingFormGroup.get(target);
      if (control && source) {
        control.setValue(source);
      }
    });

    this.mappingFormGroup.markAsPristine();
  }

  /**
   * Retrieves the mapped source column values from the mapping form group controls.
   *
   * @return {string[]} Array of unique source column values
   */
  getMappedSourceColumn() {
    let controls = this.mappingFormGroup.controls;
    let controlsKeys = Object.keys(controls);

    return [...new Set(controlsKeys.map((key) => controls[key].value))];
  }

  /**
   * Retrieves the mapped target fields from the mapping form group controls.
   *
   * @return {string[]} An array of unique target field values that are not null
   */
  getMappedTargetFields() {
    let controls = this.mappingFormGroup.controls;
    let controlsKeys = Object.keys(controls);

    return [...new Set(controlsKeys.filter((key) => controls[key].value !== null))];
  }

  onFieldMappingChange(newValue: FieldMappingItem, previousValue: FieldMappingItem) {
    if (newValue == previousValue) {
      return;
    }

    // Process columns selection status

    // -- New selection: add to mapped
    if (newValue && newValue.column_src) {
      const column_src = newValue.column_src;
      if (Array.isArray(column_src)) {
        column_src.forEach((item: string) => {
          this.fieldMappingStatus.mapped.add(item);
          this.fieldMappingStatus.unmapped.delete(item);
        });
      } else {
        this.fieldMappingStatus.mapped.add(column_src);
        this.fieldMappingStatus.unmapped.delete(column_src);
      }
    }

    // -- Previous selection: remove from mapped
    if (previousValue && previousValue.column_src) {
      const column_src = previousValue.column_src;
      if (Array.isArray(column_src)) {
        column_src.forEach((item: string) => {
          this.fieldMappingStatus.mapped.delete(item);
          this.fieldMappingStatus.unmapped.add(item);
        });
      } else {
        this.fieldMappingStatus.mapped.delete(column_src);
        this.fieldMappingStatus.unmapped.add(column_src);
      }
    }
  }

  get moduleCode(): string {
    return this._importProcessService.getImportData().destination?.module.module_code;
  }
}
