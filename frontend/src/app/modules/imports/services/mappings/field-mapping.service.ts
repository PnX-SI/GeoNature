import { Injectable } from '@angular/core';
import {
  FormGroup,
  FormControl,
  Validators,
  AbstractControl,
  ValidationErrors,
  FormBuilder,
  ValidatorFn,
} from '@angular/forms';
import { ImportDataService } from '../data.service';
import { FieldMapping, FieldMappingValues } from '../../models/mapping.model';
import { BehaviorSubject, Subscription, forkJoin } from 'rxjs';
import { ImportProcessService } from '../../components/import_process/import-process.service';
import { ConfigService } from '@geonature/services/config.service';
import { TaxonTreeComponent } from '@geonature_common/form/taxon-tree/taxon-tree.component';
import { Observable } from 'rxjs-compat';
import { FormService } from '@geonature_common/form/form.service';

interface FieldsMappingStatus {
  mapped: Set<string>;
  unmapped: Set<string>;
  autogenerated: Set<string>;
}

@Injectable()
export class FieldMappingService {
  /**
   * Observable that emits data related to field mappings.
   * The emitted data has the following shape:
   * - fieldMappings: Array<FieldMapping> | null - All field mappings.
   * - targetFields: any - Data related to target fields.
   * - sourceFields: Array<string> - Names of source fields.
   */
  public data: BehaviorSubject<{
    fieldMappings: Array<FieldMapping> | null;
    targetFields: any;
    sourceFields: Array<string>;
  }> = new BehaviorSubject({
    fieldMappings: null,
    targetFields: null,
    sourceFields: null,
  });

  /**
   * Form control for selecting a field mapping.
   */
  public mappingSelectionFormControl: FormControl = new FormControl(null, []);

  /**
   * Observable that emits the currently selected field mapping.
   */
  public currentFieldMapping: BehaviorSubject<FieldMapping> = new BehaviorSubject(null);

  /**
   * Form group for managing field mappings.
   */
  public mappingFormGroup: FormGroup;

  /**
   * Contains all field mappings.
   */
  private mappingData: Array<FieldMapping>;

  /**
   * Data related to target fields.
   */
  private targetFieldsData: any;

  /**
   * Names of source fields.
   */
  private sourceFields: Array<string>;

  /**
   * Status of field mappings.
   * Contains sets of names of fields mapped, unmapped and autogenerated.
   */
  private fieldMappingStatus: FieldsMappingStatus = {
    mapped: new Set<string>(),
    unmapped: new Set<string>(),
    autogenerated: new Set<string>(),
  };

  private currentFieldMappingSubscription: Subscription;

  /**
   * Flag indicating if the form is ready to be displayed.
   */
  public isReady: boolean = false;

  constructor(
    private _fb: FormBuilder,
    private _importDataService: ImportDataService,
    private _importProcessService: ImportProcessService,
    private _configService: ConfigService,
    private _formservice: FormService
  ) {}

  /**
   * This method returns the number of sources fields included in the current mapping.
   */
  mappingCompletionStatus() {
    return this.sourceFields?.length - this.fieldMappingStatus.mapped.size;
  }

  mappingStatus(category: string, item: string) {
    return this.fieldMappingStatus[category].has(item);
  }

  parseData({ fieldMappings, targetFields, sourceFields }) {
    this.targetFieldsData = targetFields;
    this.mappingData = fieldMappings;
    this.sourceFields = sourceFields;

    this.fieldMappingStatus.unmapped = new Set(this.sourceFields);
    this.flattenTargetFieldData(this.targetFieldsData).forEach(({ autogenerated, name_field }) => {
      if (autogenerated) {
        this.fieldMappingStatus.autogenerated.add(name_field);
      } else {
        this.fieldMappingStatus.unmapped.add(name_field);
      }
    });
  }

  retrieveData() {
    forkJoin({
      fieldMappings: this._importDataService.getFieldMappings(),
      targetFields: this._importDataService.getBibFields(),
      sourceFields: this._importDataService.getColumnsImport(
        this._importProcessService.getImportData().id_import
      ),
    }).subscribe(({ fieldMappings, targetFields, sourceFields }) => {
      this.data.next({ fieldMappings, targetFields, sourceFields });
    });
  }
  getTargetFieldsData() {
    return this.targetFieldsData;
  }
  getSourceFieldsData() {
    return this.sourceFields;
  }
  getMappings() {
    return this.mappingData;
  }

  initForm() {
    this.mappingFormGroup = this._fb.group({});
    this.mappingFormGroup.updateValueAndValidity();
  }

  /**
   * Flattens the field mapping data from the given target fields array.
   *
   * @param {any[]} targetFields - The array of target fields containing themes and fields.
   * @return {any[]} The flattened array of field mapping data.
   */
  flattenTargetFieldData(targetFields: any) {
    let flattened = [];
    targetFields.forEach((entity) => {
      entity.themes.forEach(({ fields, theme }) => {
        fields.forEach((field) => {
          flattened.push({ ...field, ...{ entity: entity.label, theme: theme.fr_label_theme } });
        });
      });
    });
    return flattened;
  }

  /**
   * Populates the mapping form with target field data.
   *
   */
  populateMappingForm() {
    const classic_behavior = (vc, name_field) => {
      if (!(name_field in this.fieldMappingStatus.mapped)) {
        this.onFieldMappingChange(name_field, vc);
      } else {
        this.mappingFormGroup.controls[name_field].setValue(vc, {
          onlySelf: true,
          emitEvent: false,
          emitModelToViewChange: true,
        });
      }
    };
    this.flattenTargetFieldData(this.targetFieldsData).forEach(
      ({ name_field, autogenerated, mandatory, mandatory_conditions, optional_conditions }) => {
        let control: AbstractControl;
        if (!(name_field in this.fieldMappingStatus.mapped)) {
          control = new FormControl(null, mandatory ? [Validators.required] : []);
        } else {
          control = this.mappingFormGroup.controls[name_field];
        }
        control.valueChanges.subscribe((vc) => {
          classic_behavior(vc, name_field);
        });

        this.mappingFormGroup.addControl(name_field, control);
        /**
         * MANDATORY CONDITIONS
         */

        if (mandatory_conditions !== null && !mandatory) {
          this.mappingFormGroup
            .get(name_field)
            .setValidators(
              this._formservice.RequiredIfControlIsNotNullValidator(mandatory_conditions)
            );
          mandatory_conditions.forEach((mandatory_condition) => {
            this.mappingFormGroup.get(mandatory_condition).valueChanges.subscribe((vc) => {
              classic_behavior(vc, name_field);
              this.mappingFormGroup.get(name_field).updateValueAndValidity();
            });
          });
        }
        /**
         * END MANDATORY CONDITIONS
         */
        if (optional_conditions && mandatory) {
          this.mappingFormGroup
            .get(name_field)
            .setValidators(
              this._formservice.NotRequiredIfControlIsNotNullValidator(optional_conditions)
            );
          optional_conditions.forEach((mandatory_condition) => {
            this.mappingFormGroup.get(mandatory_condition).valueChanges.subscribe((vc) => {
              classic_behavior(vc, name_field);
              this.mappingFormGroup.get(name_field).updateValueAndValidity();
            });
          });
        }
      }
    );

    this.currentFieldMappingSubscription = this.currentFieldMapping.subscribe((fieldMapping) => {
      this.fieldMappingStatus = {
        mapped: new Set<string>(),
        unmapped: new Set<string>(),
        autogenerated: new Set<string>(),
      };

      if (fieldMapping === null) {
        this.mappingFormGroup.reset();
        for (const field of this.fieldMappingStatus.autogenerated) {
          const control = this.mappingFormGroup.get(field);
          if (
            field !== 'unique_id_sinp_generate' ||
            this._configService.IMPORT.DEFAULT_GENERATE_MISSING_UUID
          ) {
            control.setValue(true);
          }
        }
      } else {
        this.fillFormWithMapping(fieldMapping.values, true);
      }
    });
  }

  destroySubscription() {
    this.currentFieldMappingSubscription.unsubscribe();
  }

  /**
   * Fill the field form with the value define in the given mapping
   * @param mapping : id of the mapping
   */
  fillFormWithMapping(mappingvalues: FieldMappingValues, fromMapping = false) {
    // Retrieve fields for this mapping

    this.mappingFormGroup.reset();
    Object.entries(mappingvalues as FieldMappingValues).forEach(([target, source]) => {
      let control = this.mappingFormGroup.get(target);
      if (control) {
        if (typeof source === 'object') {
          let value = source;
          let filtered = source.filter((x) => this.sourceFields.includes(x));
          if (filtered.length > 0) {
            value = filtered;
          }
          control.setValue(value);
        } else {
          if (
            !this.sourceFields.includes(source) &&
            !(target in this.fieldMappingStatus.autogenerated)
          ) {
            return;
          }
          control.setValue(source);
        }

        if (fromMapping) {
          this.fieldMappingStatus.mapped.add(target);
        }
      }
    });
  }

  onFieldMappingChange(name_field: string, value: any) {
    if (value) {
      this.fieldMappingStatus.mapped.add(value);
      this.fieldMappingStatus.unmapped.delete(value);
    } else {
      this.fieldMappingStatus.mapped.delete(name_field);
      this.fieldMappingStatus.unmapped.add(name_field);
    }
  }

  // add a form control for each target field in the mappingForm
  // mandatory target fields have a required validator
  displayAlert(field) {
    return (
      field.name_field === 'unique_id_sinp_generate' &&
      !this.mappingFormGroup.get(field.name_field).value
    );
  }
  /**
   * Add custom validator to the form
   */
  geoFormValidator(g: FormGroup): ValidationErrors | null {
    /* We require a position (wkt/x,y) and/or a attachement (code{maille,commune,departement})
       We can set both as some file can have a position for few rows, and a attachement for others.
       Contraints are:
       - We must have a position or a attachement (or both).
       - WKT and X/Y are mutually exclusive.
       - Code{maille,commune,departement} are mutually exclusive.
    */
    /*
        6 cases :
        - all null : all required
        - wkt == null and both coordinates != null : wkt not required, codes not required, coordinates required
        - wkt != '' : wkt required, coordinates and codes not required
        - one of the code not empty: others not required
        - wkt and X/Y filled => error
        */
    let xy = false;
    let attachment = false;

    let wkt_errors = null;
    let longitude_errors = null;
    let latitude_errors = null;
    let codemaille_errors = null;
    let codecommune_errors = null;
    let codedepartement_errors = null;
    // check for position
    if (g.value.longitude != null || g.value.latitude != null) {
      xy = true;
      // ensure both x/y are set
      if (g.value.longitude == null) longitude_errors = { required: true };
      if (g.value.latitude == null) latitude_errors = { required: true };
    }
    if (g.value.WKT != null) {
      xy = true;
    }
    // check for attachment
    if (
      g.value.codemaille != null ||
      g.value.codecommune != null ||
      g.value.codedepartement != null
    ) {
      attachment = true;
    }
    if (xy == false && attachment == false) {
      wkt_errors = { required: true };
      longitude_errors = { required: true };
      latitude_errors = { required: true };
      codemaille_errors = { required: true };
      codecommune_errors = { required: true };
      codedepartement_errors = { required: true };
    }
    if ('WKT' in g.controls) g.controls.WKT.setErrors(wkt_errors);
    if ('longitude' in g.controls) g.controls.longitude.setErrors(longitude_errors);
    if ('latitude' in g.controls) g.controls.latitude.setErrors(latitude_errors);
    if ('codemaille' in g.controls) g.controls.codemaille.setErrors(codemaille_errors);
    if ('codecommune' in g.controls) g.controls.codecommune.setErrors(codecommune_errors);
    if ('codedepartement' in g.controls)
      g.controls.codedepartement.setErrors(codedepartement_errors);
    // we set errors on individual form control level, so we return no errors (null) at form group level.
    return null;
  }
}
