"""mappings

Revision ID: 6470a2141c83
Revises: bf80cb5679be
Create Date: 2022-02-09 10:35:27.895766

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSON


# revision identifiers, used by Alembic.
revision = "6470a2141c83"
down_revision = "bf80cb5679be"
branch_labels = None
depends_on = None


def upgrade():
    ### Rename mapping columns, add Not Null
    op.alter_column(
        table_name="t_mappings",
        column_name="id_mapping",
        new_column_name="id",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="mapping_label",
        new_column_name="label",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="mapping_type",
        new_column_name="type",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="is_public",
        new_column_name="public",
        nullable=False,
        schema="gn_imports",
    )

    ### Add fieldmapping (resp. contentmapping) table with JSON values column
    fieldmapping = op.create_table(
        "t_fieldmappings",
        sa.Column(
            "id",
            sa.INTEGER,
            sa.ForeignKey("gn_imports.t_mappings.id", ondelete="CASCADE"),
            primary_key=True,
        ),
        sa.Column("values", JSON),
        schema="gn_imports",
    )
    contentmapping = op.create_table(
        "t_contentmappings",
        sa.Column(
            "id",
            sa.INTEGER,
            sa.ForeignKey("gn_imports.t_mappings.id", ondelete="CASCADE"),
            primary_key=True,
        ),
        sa.Column("values", JSON),
        schema="gn_imports",
    )

    ### Populate fieldmapping and contentmapping tables
    op.execute(
        """
    WITH
    cte1 AS (
        SELECT
            id_mapping,
            json_object_agg(
                target_field,
                source_field
            ) AS fieldmapping
        FROM
            gn_imports.t_mappings_fields mf
        JOIN
            gn_imports.dict_fields df ON df.name_field = mf.target_field
        WHERE
            df.autogenerated IS FALSE
            AND
            NOT (source_field IS NULL OR source_field = '')
        GROUP BY
            id_mapping
    ),
    cte2 AS (
        SELECT
            id_mapping,
            json_object_agg(
                target_field,
                CASE WHEN source_field = 'true'
                     THEN TRUE
                     ELSE FALSE
                END
            ) AS fieldmapping
        FROM
            gn_imports.t_mappings_fields mf
        JOIN
            gn_imports.dict_fields df ON df.name_field = mf.target_field
        WHERE
            df.autogenerated IS TRUE
        GROUP BY
            id_mapping
    )
    INSERT INTO
        gn_imports.t_fieldmappings (id, values)
    SELECT
        id_mapping,
        cte1.fieldmapping::jsonb || cte2.fieldmapping::jsonb
    FROM
        cte1
    LEFT JOIN
        cte2 USING(id_mapping)
    """
    )
    op.execute(
        """
    INSERT INTO
        gn_imports.t_contentmappings (id, values)
    WITH cte AS (
        SELECT
            m.id_mapping,
            nt.id_type,
            json_object_agg(source_value, n.cd_nomenclature) AS source2nomenc
        FROM
            gn_imports.t_mappings_values m
        JOIN
            ref_nomenclatures.t_nomenclatures n ON m.id_target_value = n.id_nomenclature
        JOIN
            ref_nomenclatures.bib_nomenclatures_types nt ON n.id_type = nt.id_type
        GROUP BY m.id_mapping, nt.id_type
    )
    SELECT
        id_mapping,
        json_object_agg(nt.mnemonique, source2nomenc) AS json
    FROM
        cte
    JOIN
        ref_nomenclatures.bib_nomenclatures_types nt ON cte.id_type = nt.id_type
    GROUP BY
        id_mapping
    """
    )
    op.drop_constraint(
        constraint_name="fk_gn_imports_t_mappings_fields",
        schema="gn_imports",
        table_name="t_imports",
    )
    op.drop_constraint(
        constraint_name="fk_gn_import_t_mappings_values",
        schema="gn_imports",
        table_name="t_imports",
    )
    op.execute(
        """
    DELETE FROM
	gn_imports.t_mappings
    USING
	    gn_imports.t_mappings m
    LEFT OUTER JOIN
	gn_imports.t_fieldmappings fm ON m.id = fm.id
    WHERE
	    gn_imports.t_mappings.id = m.id
	    AND
	m."type" = 'FIELD'
	AND
	fm.id is NULL
    """
    )
    op.execute(
        """
    DELETE FROM
	gn_imports.t_mappings
    USING
	    gn_imports.t_mappings m
    LEFT OUTER JOIN
	gn_imports.t_contentmappings cm ON m.id = cm.id
    WHERE
	    gn_imports.t_mappings.id = m.id
	    AND
	m."type" = 'CONTENT'
	AND
	cm.id is NULL
    """
    )
    op.drop_table("t_mappings_fields", schema="gn_imports")
    op.drop_table("t_mappings_values", schema="gn_imports")

    ### Add mappings columns on import, populate them, drop old foreign key to mappings
    op.add_column("t_imports", sa.Column("fieldmapping", JSON), schema="gn_imports")
    op.add_column("t_imports", sa.Column("contentmapping", JSON), schema="gn_imports")
    op.execute(
        """
    UPDATE
        gn_imports.t_imports i
    SET
        fieldmapping = fm.values
    FROM
        gn_imports.t_fieldmappings fm
    WHERE
        i.id_field_mapping = fm.id
    """
    )
    op.execute(
        """
    UPDATE
        gn_imports.t_imports i
    SET
        contentmapping = cm.values
    FROM
        gn_imports.t_contentmappings cm
    WHERE
        i.id_content_mapping = cm.id
    """
    )
    op.drop_column("t_imports", "id_field_mapping", schema="gn_imports")
    op.drop_column("t_imports", "id_content_mapping", schema="gn_imports")

    # Remove unnamed mappings, set Not Null on label
    op.execute(
        """
    DELETE FROM
        gn_imports.t_mappings
    WHERE
        label IS NULL
    """
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="label",
        nullable=False,
        schema="gn_imports",
    )

    # Set unique constraint on (label, type)
    op.drop_constraint("t_mappings_un", "t_mappings", schema="gn_imports")
    op.create_unique_constraint(
        "t_mappings_un", "t_mappings", schema="gn_imports", columns=["label", "type"]
    )


def downgrade():
    # Set unique constraint on label
    op.drop_constraint("t_mappings_un", "t_mappings", schema="gn_imports")
    op.create_unique_constraint(
        "t_mappings_un", "t_mappings", schema="gn_imports", columns=["label"]
    )

    # Remove Not Null on label for temporary mappings
    op.alter_column(
        table_name="t_mappings",
        column_name="label",
        nullable=True,
        schema="gn_imports",
    )

    ### Create an mapping for each import
    op.add_column(
        "t_imports",
        sa.Column(
            "id_field_mapping",
            sa.Integer,
            sa.ForeignKey("gn_imports.t_mappings.id", onupdate="CASCADE", ondelete="NO ACTION"),
        ),
        schema="gn_imports",
    )
    op.add_column(
        "t_imports",
        sa.Column(
            "id_content_mapping",
            sa.Integer,
            sa.ForeignKey("gn_imports.t_mappings.id", onupdate="CASCADE", ondelete="NO ACTION"),
        ),
        schema="gn_imports",
    )
    op.execute(
        """
    DO $$
    DECLARE
        _id_mapping INTEGER;
        _id_import INTEGER;
    BEGIN
        FOR _id_import IN
            SELECT
                i.id_import
            FROM
                gn_imports.t_imports i
            WHERE
                i.fieldmapping IS NOT NULL
        LOOP
            INSERT INTO
                gn_imports.t_mappings ("type" , "active", "public")
            VALUES
                ('FIELD', TRUE, FALSE)
            RETURNING
                id
            INTO
                _id_mapping;

            UPDATE
                gn_imports.t_imports i
            SET
                id_field_mapping = _id_mapping
            WHERE
                i.id_import = _id_import;
            
            INSERT INTO
                gn_imports.t_fieldmappings ("id", "values")
            SELECT
                id_field_mapping,
                fieldmapping
            FROM
                gn_imports.t_imports
            WHERE
                id_import = _id_import;
        END LOOP;
    END $$;
    """
    )
    op.execute(
        """
    DO $$
    DECLARE
        _id_mapping INTEGER;
        _id_import INTEGER;
    BEGIN
        FOR _id_import IN
            SELECT
                i.id_import
            FROM
                gn_imports.t_imports i
            WHERE
                i.contentmapping IS NOT NULL
        LOOP
            INSERT INTO
                gn_imports.t_mappings ("type" , "active", "public")
            VALUES
                ('CONTENT', TRUE, FALSE)
            RETURNING
                id
            INTO
                _id_mapping;

            UPDATE
                gn_imports.t_imports i
            SET
                id_content_mapping = _id_mapping
            WHERE
                i.id_import = _id_import;
            
            INSERT INTO
                gn_imports.t_contentmappings ("id", "values")
            SELECT
                id_content_mapping,
                contentmapping
            FROM
                gn_imports.t_imports
            WHERE
                id_import = _id_import;
        END LOOP;
    END $$;
    """
    )

    op.drop_column("t_imports", "fieldmapping", schema="gn_imports")
    op.drop_column("t_imports", "contentmapping", schema="gn_imports")

    op.create_table(
        "t_mappings_fields",
        sa.Column("id_match_fields", sa.Integer, primary_key=True),
        sa.Column(
            "id_mapping",
            sa.Integer,
            sa.ForeignKey("gn_imports.t_mappings.id", onupdate="CASCADE", ondelete="CASCADE"),
        ),
        sa.Column("source_field", sa.Unicode(255)),
        sa.Column(
            "target_field",
            sa.Unicode(255),
            sa.ForeignKey(
                "gn_imports.dict_fields.name_field", onupdate="CASCADE", ondelete="CASCADE"
            ),
        ),
        schema="gn_imports",
    )
    op.create_table(
        "t_mappings_values",
        sa.Column("id_match_fields", sa.Integer, primary_key=True),
        sa.Column(
            "id_mapping",
            sa.Integer,
            sa.ForeignKey("gn_imports.t_mappings.id", onupdate="CASCADE", ondelete="CASCADE"),
        ),
        sa.Column("source_value", sa.Unicode(255)),
        sa.Column(
            "id_target_value",
            sa.Integer,
            sa.ForeignKey(
                "ref_nomenclatures.t_nomenclatures.id_nomenclature",
                onupdate="CASCADE",
                ondelete="CASCADE",
            ),
        ),
        schema="gn_imports",
    )

    op.execute(
        """
    WITH cte AS (
        SELECT
            id AS id_mapping,
            (JSON_EACH_TEXT("values")).*
        FROM
            gn_imports.t_fieldmappings
    )
    INSERT INTO
        gn_imports.t_mappings_fields ("id_mapping", "target_field", "source_field")
    SELECT
        id_mapping,
        key,
        value
    FROM
        cte
    JOIN
        gn_imports.dict_fields f ON f.name_field = cte.key
    """
    )

    op.execute(
        """
    WITH outercte AS (
        WITH innercte AS (
            SELECT
                id AS id_mapping,
                (JSON_EACH("values")).*
            FROM
                gn_imports.t_contentmappings
        )
        SELECT
            id_mapping,
            "key" AS type_mnemonique,
            (JSON_EACH_TEXT("value")).*
        FROM
            innercte
    )
    INSERT INTO
        gn_imports.t_mappings_values ("id_mapping", "source_value", "id_target_value")
    SELECT
        id_mapping,
        "key" AS source_value,
        n.id_nomenclature AS id_target_value
    FROM
        outercte
    JOIN
        ref_nomenclatures.bib_nomenclatures_types nt
    ON
        outercte.type_mnemonique = nt.mnemonique
    JOIN
        ref_nomenclatures.t_nomenclatures n
    ON
        outercte.value = n.cd_nomenclature
        AND
        nt.id_type = n.id_type
    """
    )

    op.drop_table("t_fieldmappings", schema="gn_imports")
    op.drop_table("t_contentmappings", schema="gn_imports")

    op.alter_column(
        table_name="t_mappings",
        column_name="id",
        new_column_name="id_mapping",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="label",
        new_column_name="mapping_label",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="type",
        new_column_name="mapping_type",
        schema="gn_imports",
    )
    op.alter_column(
        table_name="t_mappings",
        column_name="public",
        new_column_name="is_public",
        nullable=True,
        schema="gn_imports",
    )
